{"version":3,"sources":["component/card.js","component/cardArr.js","component/searchBox.js","component/scroll.js","container/app.js","serviceWorker.js","index.js"],"names":["Card","obj","className","src","id","alt","name","email","CardArr","user","console","log","CardList","map","u","i","key","SearchBox","searchfield","type","placeholder","onChange","Scroll","prop","style","overflow","border","height","children","App","search","event","setState","searchRobo","target","value","state","robot","robo","fetch","then","response","json","this","filter","r","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAiBeA,G,MAdF,SAACC,GAEb,OACA,yBAAKC,UAAU,6DACb,yBAAKA,UAAU,UACf,yBAAKC,IAAG,+BAA0BF,EAAIG,GAA9B,YAA6CC,IAAI,SAC1D,6BACC,4BAAKJ,EAAIK,MACT,2BAAIL,EAAIM,YCSIC,G,MAhBC,SAAC,GAAW,IAAVC,EAAS,EAATA,KACjBC,QAAQC,IAAI,UAAUF,GACtB,IAAIG,EAAWH,EAAKI,KAAI,SAACC,EAAEC,GAC1B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIU,EAAEV,GAAIE,KAAMQ,EAAER,KAAMC,MAAOO,EAAEP,WAIvD,OACC,yBAAKL,UAAU,YACbU,KCCWK,EAZG,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,YACpB,OACC,2BACAC,KAAK,SACLC,YAAY,uBACZlB,UAAU,wCACVmB,SAAUH,KCKGI,G,MAXF,SAACC,GAEb,OACC,yBAAKC,MAAO,CAACC,SAAS,OAAQC,OAAO,kBAAmBC,OAAO,UAC7DJ,EAAKK,YC+CMC,E,YA7Cd,aAAc,IAAD,8BACZ,+CAmBDC,OAAO,SAACC,GACP,EAAKC,SAAS,CAACC,WAAWF,EAAMG,OAAOC,SAnBvC,EAAKC,MAAM,CACVC,MAAM,GACNJ,WAAW,IAEZ,EAAKK,KAAK,GANE,E,iFASO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAA/B,GACL,EAAKuB,SAAS,CAACK,MAAQ5B,S,+BAWhB,IAAD,OAKP,OAHAkC,KAAKL,KAAKK,KAAKP,MAAMC,MAAMO,QAAO,SAAAC,GAChC,OAAOA,EAAEvC,KAAKwC,cAAcC,SAAS,EAAKX,MAAMH,WAAWa,kBAG5D,yBAAK5C,UAAU,WACf,wBAAIA,UAAU,aAAd,cACA,kBAAC,EAAD,CAAWgB,YAAayB,KAAKb,SAC7B,yBAAK5B,UAAU,OACf,kBAAC,EAAD,KACA,kBAAC,EAAD,CAASO,KAAOkC,KAAKL,c,GAvCNU,a,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAEP,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDwH9B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.c8e949ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nconst Card = (obj)=>{\r\n\r\n\treturn(\r\n\t<div className='bg-light-blue br4 pa2 tc rotate-center bw2 shadow-5 hero1'>\r\n\t \t<div className='inner1'>\r\n\t \t<img src={`https://robohash.org/${obj.id}?200x200`}  alt=\"Robo\" />\r\n\t\t<div>\r\n\t\t\t<h2>{obj.name}</h2>\r\n\t\t\t<p>{obj.email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n    </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\nimport './cardArr.css'\r\n\r\nconst CardArr = ({user}) =>{\r\n\tconsole.log('CardArr',user);\r\n\tlet CardList = user.map((u,i)=>{\r\n\t\treturn <Card key={i} id={u.id} name={u.name} email={u.email} />\r\n\r\n\t});\r\n\r\n\treturn(\r\n\t\t<div className='hero br4'>\r\n\t\t\t{CardList}\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default CardArr;","import React from 'react';\r\n\r\nconst SearchBox = ( {searchfield} )=>{\r\n\treturn(\r\n\t\t<input \r\n\t\ttype='search' \r\n\t\tplaceholder=\"Enter the Robot Name\" \r\n\t\tclassName=\"bg-lightest-blue pa3 ba b--green grow\" \r\n\t\tonChange={searchfield}\r\n\t\t/>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(prop)=>{\r\n\r\n\treturn(\r\n\t\t<div style={{overflow:'auto', border:'1px solid black', height:'800px'}}>\r\n\t\t\t{prop.children}\r\n\r\n\t\t</div>\r\n\r\n\t\t)\r\n\t\t\t}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\nimport CardArr from '../component/cardArr';\r\nimport SearchBox from '../component/searchBox';\r\nimport './app.css';\r\nimport Scroll from '../component/scroll';\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobot:[],\r\n\t\t\tsearchRobo:''\r\n\t\t}\r\n\t\tthis.robo=[];\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response=>{\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(user=>{\r\n\t\t\tthis.setState({robot : user});\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tsearch=(event)=>{\r\n\t\tthis.setState({searchRobo:event.target.value});\r\n\r\n\t\t\t}\r\n\r\n\r\n\trender(){\r\n\r\n\t\tthis.robo=this.state.robot.filter(r=>{\r\n\t\t\t\treturn r.name.toLowerCase().includes(this.state.searchRobo.toLowerCase())\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div className=\"tc new1\">\r\n\t\t\t<h1 className='font-face'>RoboFriend</h1>\r\n\t\t\t<SearchBox searchfield={this.search}/>\r\n\t\t\t<div className='new'>\r\n\t\t\t<Scroll>\r\n\t\t\t<CardArr user={ this.robo } />\r\n\t\t\t</Scroll>\t\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/app'\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t\r\n\t\t<App />\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}